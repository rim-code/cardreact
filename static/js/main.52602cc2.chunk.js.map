{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","displayMessageDate","displayMessageUser","validThru","number","userName","validUser","status","message","validDate","handleChangeName","bind","handleChangeDate","target","value","length","x","slice","toString","resultStr","i","trim","this","setState","event","substring","valid","match","className","src","class","type","onChange","e","renderCardNumber","placeholder","style","color","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52602cc2.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\nimport{Component} from \"react\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayMessageDate: \"12/08\",\n      displayMessageUser: \"Enter the user name\",\n      validThru: \"\",\n      number: \"\",\n      userName:\"\",\n      validUser: {\n        status: true,\n        message: \"\"\n      },\n      validDate: {\n        status: true,\n        message: \"\"\n      }\n    };\n    this.handleChangeName = this.handleChangeName.bind(this)\n    this.handleChangeDate = this.handleChangeDate.bind(this);\n \n    }\n\n\n      \n   \n\n\n\n   renderCardNumber(number) {\n  \n   if(number.target.value.length>15){\n    let x=number.target.value.slice(0,16)\n     x= x.toString()\n    let resultStr = ''\n    for(let i =0; i < number.target.value.length; i += 4) {\n      resultStr += x.slice(i,i + 4) + ' '\n   }\n    return resultStr.trim()\n  \n   }\n  \n   number.target.value =number.target.value.toString()\n    let resultStr = ''\n    for(let i =0; i < number.target.value.length; i += 4) {\n      resultStr += number.target.value.slice(i,i + 4) + ' '\n    }\n    \n     resultStr.trim()\n   \n    this.setState({\n      number: number.target.value\n    });\n  \n  }\n\n  \n  handleChangeDate(event) {\n  \n    this.setState({\n      validThru:\n        event.target.value.substring(0, 2) +\n        \"/\" +\n        event.target.value.substring(2, 4),\n      valid: { status: true, message: \"\" }\n    });\n  }\n\n   \n  handleChangeName(event) {\n    var onlyTextRegex = /[^A-Za-z]/g;\n    if (event.target.value.match(onlyTextRegex)) {\n      this.setState({\n        validUser: { status: false, message: \"Tape only text\" }\n      });\n    } else if (event.target.value.length > 20) {\n      this.setState({ validUser: { status: false, message: \"Max length 20\" } });\n    } else {\n      this.setState({\n        userName: event.target.value,\n        valid: { status: true, message: \"\" }\n      });\n    }\n  }\n   \n\n\n\n\n\n\n  render() { \n    const { validUser } = this.state;\n    const { validDate } = this.state;\n    return (\n      <div>\n        <div className=\"App\">\n          <div className=\"text-card\">\n            <h1>CREDIT CARD</h1></div>\n    \n          <div className=\"chip-card\">\n            <img src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/credit-card-chip-1522262-1288452.png\" />\n          </div>\n          <div className=\"main-container\">\n            <div className=\"numbers\">\n    \n              <div className=\"num-one\">\n                <p>{this.state.number}</p>\n              </div>\n              <div className=\"credit-card-info\">\n                <div className=\"card-num\">\n                  <p>5422</p>\n                </div>\n                <div className=\"info_expiry\">\n                  <div className=\"mon-th\">\n                    <p>MONTH/YEAR</p>\n                  </div>\n                  <div className=\"info-label\">\n                    <div className=\"valid\">\n                      <p>VALID<br />THRU</p>\n                    </div>\n                    <div className=\"arrow\">\n                      <i class=\"fas fa-caret-right\"></i>\n                    </div>\n                    <div className=\"num\">\n                      <p>{this.state.validThru}</p>\n                    </div>\n                  </div>\n    \n    \n                </div>\n    \n    \n              </div>\n              <div className=\"card-name\">\n                <p>{this.state.userName}</p>\n              </div>\n            </div>\n            <div className=\"logo-card\">\n              <img src=\"https://www.clipartwiki.com/clipimg/full/57-577539_mastercard-clipart-credit-card-visa-and-mastercard-logo.png\" />\n            </div>\n          </div>\n    \n\n\n\n\n\n\n\n        </div>\n      \n<form>\n<input  type=\"number\"  onChange={(e)=>this.renderCardNumber(e)}></input>\n<input  type=\"text\"  placeholder={this.state.displayMessageUser}  onChange={this.handleChangeName} ></input>\n          \n          \n          {!validUser.status ? (\n            <span style={{ color: \"#ff0000\" }}>{validUser.message}</span>\n          ) : null}\n          \n\n          \n  \n  <input   type=\"number\"  placeholder={this.state.displayMessageDate}onChange={this.handleChangeDate} ></input>\n            \n  {!validDate.status ? ( <span style={{ color: \"#ff0000\" }}>{validDate.message}</span>\n          ) : null}\n           \n</form>\n\n\n\n        </div>\n    \n      );\n\n    \n  }\n}\n \nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}